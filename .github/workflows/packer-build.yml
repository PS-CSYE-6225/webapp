name: Packer Build

on:
  push:
    branches:
        - main

jobs:
  build:
    name: Packer Build Check
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

      # Step to create .env file with secret values
    - name: Create .env file
      run: |
        touch .env
        echo "DB_PORT=${{secrets.DB_PORT}}" >> .env
        echo "DB_NAME=${{secrets.DB_NAME}}" >> .env
        echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
        echo "DB_USER=${{secrets.DB_USER}}" >> .env
        echo "DB_HOST=${{secrets.DB_HOST}}" >> .env
        cat .env

    - name: Zip Webapp Directory
      run: zip -r webapp.zip .

    - name: Check if webapp.zip Exists
      run: |
        if [ -f ./webapp.zip ]; then
          echo "webapp.zip exists."
        else
          echo "webapp.zip does not exist."
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20.x"

    - name: Install Dependencies
      run: npm i

    - name: Configure Environment Variables
      run: |
        echo DB_USER=${{ secrets.DB_USER }}
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        echo DB_NAME=${{ secrets.DB_NAME }}
        echo DB_HOST=${{ secrets.DB_HOST }}
        echo DB_PORT=${{ secrets.DB_PORT }}

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h "127.0.0.1" --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done

    - name: Run Test
      run: npm test 
      env:
        DB_PORT: ${{secrets.DB_PORT}}
        DB_NAME: ${{secrets.DB_NAME}}
        DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        DB_USER: ${{secrets.DB_USER}}
        DB_HOST: ${{secrets.DB_HOST}}
        #ENVIORNMENT: ${{secrets.ENVIORNMENT}}

    - name: Check and Install AWS CLI
      run: |
        if aws --version &> /dev/null; then
          echo "AWS CLI is already installed. Skipping installation."
        else
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        fi
        echo "AWS CLI Version:"
        aws --version



    - name: Check and Install Packer
      run: |
        if packer --version &> /dev/null; then
          echo "Packer is already installed. Skipping installation."
        else
          echo "Installing Packer..."
          sudo apt-get update
          sudo apt-get install -y unzip
          curl -LO https://releases.hashicorp.com/packer/1.11.2/packer_1.11.2_linux_amd64.zip
          unzip packer_1.11.2_linux_amd64.zip
          sudo mv packer /usr/local/bin/
        fi
        echo "Packer Version:"
        packer --version


    - name: Install plugins
      run: packer init csye6225-aws.pkr.hcl

    - name: Validate Packer Template  
      run: |
        packer validate csye6225-aws.pkr.hcl

    - name: Build Packer Image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        VPC_ID: ${{ secrets.VPC_ID }}
        SUBNET_ID: ${{ secrets.SUBNET_ID }}
        DEV_USER: ${{ secrets.DEV_USER }}
        DEMO_USER: ${{ secrets.DEMO_USER }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
       packer build \
        -var "vpc_id=${{ secrets.VPC_ID }}" \
        -var "subnet_id=${{ secrets.SUBNET_ID }}" \
        -var "db_name=${{ secrets.DB_NAME }}" \
        -var "db_user=${{ secrets.DB_USER }}" \
        -var "db_password=${{ secrets.DB_PASSWORD }}" \
        -var "dev_user=${{ secrets.DEV_USER }}" \
        -var "demo_user=${{ secrets.DEMO_USER }}" \
        csye6225-aws.pkr.hcl



    - name: Share the AMI and Save AMI_ID
      id: share_ami
      run: |
          AMI_ID=$(aws ec2 describe-images \
              --owners self \
              --filters "Name=state,Values=available" \
              --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
              --output text)

          if [ -n "$AMI_ID" ]; then
            echo "Sharing AMI $AMI_ID with DEMO account..."
            aws ec2 modify-image-attribute --image-id "$AMI_ID" \
              --launch-permission "{\"Add\": [{\"UserId\": \"${{ secrets.DEMO_USER }}\"}]}"
            echo "::set-output name=ami_id::$AMI_ID"
            echo "$AMI_ID" > ami_id.txt
          else
            echo "AMI not found, exiting."
            exit 1
          fi

    - name: Upload AMI_ID Artifact
      uses: actions/upload-artifact@v4
      with:
          name: ami_id
          path: ami_id.txt
      
      
    - name: Configure AWS CLI for Dev/Demo Account
      run: |
        DEPLOY_ENVIRONMENT="dev"  # Change to "demo" if needed
      
         if [ "$DEPLOY_ENVIRONMENT" = "dev" ]; then
         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws configure set region ${{ secrets.AWS_REGION }}
         elif [ "$DEPLOY_ENVIRONMENT" = "demo" ]; then
         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
         aws configure set region ${{ secrets.AWS_REGION }}
        else
         echo "Invalid deploy environment specified: $DEPLOY_ENVIRONMENT"
          exit 1
        fi
        
      
    - name: Configure AWS CLI for Dev/Demo Account
      run: |
        DEPLOY_ENVIRONMENT="dev"  # Change to "demo" if needed
      
         if [ "$DEPLOY_ENVIRONMENT" = "dev" ]; then
         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws configure set region ${{ secrets.AWS_REGION }}
         elif [ "$DEPLOY_ENVIRONMENT" = "demo" ]; then
         aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
         aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
         aws configure set region ${{ secrets.AWS_REGION }}
        else
         echo "Invalid deploy environment specified: $DEPLOY_ENVIRONMENT"
          exit 1
        fi
        

    