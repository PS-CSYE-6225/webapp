name: Packer Build

on:
  push:
    branches:
        - main

jobs:
  build:
    name: Packer Build Check
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
          #GCP_PROJECT_ID_DEMO: ${{ secrets.GCP_PROJECT_ID_DEMO }}
          GCP_SA_KEY_DEMO: ${{ secrets.GCP_SA_KEY_DEMO }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

      # Step to create .env file with secret values
    - name: Create .env file
      run: |
        touch .env
        echo "DB_PORT=${{secrets.DB_PORT}}" >> .env
        echo "DB_NAME=${{secrets.DB_NAME}}" >> .env
        echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
        echo "DB_USER=${{secrets.DB_USER}}" >> .env
        echo "DB_HOST=${{secrets.DB_HOST}}" >> .env
        cat .env

    - name: Zip Webapp Directory
      run: zip -r webapp.zip .

    - name: Check if webapp.zip Exists
      run: |
        if [ -f ./webapp.zip ]; then
          echo "webapp.zip exists."
        else
          echo "webapp.zip does not exist."
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20.x"

    - name: Install Dependencies
      run: npm i

  

    #- name: Run Test
      #run: npm test 
      #env:
        #DB_PORT: ${{secrets.DB_PORT}}
        #DB_NAME: ${{secrets.DB_NAME}}
        #DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        #DB_USER: ${{secrets.DB_USER}}
       # DB_HOST: ${{secrets.DB_HOST}}
        #ENVIORNMENT: ${{secrets.ENVIORNMENT}}

    - name: Check and Install AWS CLI
      run: |
        if aws --version &> /dev/null; then
          echo "AWS CLI is already installed. Skipping installation."
        else
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
        fi
        echo "AWS CLI Version:"
        aws --version

    - name: Install Google Cloud CLI (Official Script)
      run: |
        curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        sudo apt-get update && sudo apt-get install -y google-cloud-cli
        gcloud --version


      
    - name: Install GCP CLI
      run: |
          sudo apt-get update
          sudo apt-get install -y google-cloud-sdk
          gcloud auth configure-docker

    #- name: Authenticate with Google Cloud
     # uses: google-github-actions/auth@v2
      #with:
       #   credentials_json: ${{ secrets.GCP_SA_KEY }}
        #  create_credentials_file: true
         # export_environment_variables: true
          #cleanup_credentials: true


    - name: Check and Install Packer
      run: |
        if packer --version &> /dev/null; then
          echo "Packer is already installed. Skipping installation."
        else
          echo "Installing Packer..."
          sudo apt-get update
          sudo apt-get install -y unzip
          curl -LO https://releases.hashicorp.com/packer/1.11.2/packer_1.11.2_linux_amd64.zip
          unzip packer_1.11.2_linux_amd64.zip
          sudo mv packer /usr/local/bin/
        fi
        echo "Packer Version:"
        packer --version


    - name: Install plugins
      run: packer init csye6225-aws.pkr.hcl

    - name: Validate Packer Template  
      run: |
        packer validate csye6225-aws.pkr.hcl

    - name: Build Packer Image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        VPC_ID: ${{ secrets.VPC_ID }}
        SUBNET_ID: ${{ secrets.SUBNET_ID }}
        DEV_USER: ${{ secrets.DEV_USER }}
        DEMO_USER: ${{ secrets.DEMO_USER }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
       packer build \
        -var "vpc_id=${{ secrets.VPC_ID }}" \
        -var "subnet_id=${{ secrets.SUBNET_ID }}" \
        -var "db_name=${{ secrets.DB_NAME }}" \
        -var "db_user=${{ secrets.DB_USER }}" \
        -var "db_password=${{ secrets.DB_PASSWORD }}" \
        -var "dev_user=${{ secrets.DEV_USER }}" \
        -var "demo_user=${{ secrets.DEMO_USER }}" \
        csye6225-aws.pkr.hcl



    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          
          aws-region: ${{ secrets.AWS_REGION }}
          
          

    - name: Verify AWS Credentials
      run: aws sts get-caller-identity

    - name: Retrieve Latest AMI and Save AMI_ID
      id: share_ami
      run: |
    
          # Retrieve the latest AMI ID
          AMI_ID=$(aws ec2 describe-images \
            --owners self \
            --filters "Name=state,Values=available" \
            --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
            --output text --region "$AWS_REGION")
      
          if [[ -n "$AMI_ID" && "$AMI_ID" != "None" ]]; then
            echo "Found latest AMI: $AMI_ID"
            
            # Share AMI with the DEMO account
            aws ec2 modify-image-attribute --image-id "$AMI_ID" \
              --launch-permission "{\"Add\": [{\"UserId\": \"${{ secrets.DEMO_USER }}\"}]}" \
              --region "$AWS_REGION"
            
            # Save AMI_ID in an environment variable for later steps
            echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      
            # Save AMI_ID to a file
            echo "$AMI_ID" > ami_id.txt
          else
            echo "No AMI found, exiting..."
            exit 1
          fi
 

    - name: Verify ami_id.txt Exists
      run: |
          if [ -f "ami_id.txt" ]; then
            echo "ami_id.txt found, proceeding to upload..."
          else
            echo "ami_id.txt not found! Workflow will fail."
            exit 1
          fi
     

    - name: Upload AWS AMI ID Artifact
      uses: actions/upload-artifact@v4
      with:
          name: ami_id
          path: ami_id.txt
          if-no-files-found: error
          compression-level: 6
          overwrite: true

   # - name: Authenticate with Google Cloud
    #  uses: google-github-actions/auth@v2
     # with:
      #    credentials_json: ${{ secrets.GCP_SA_KEY }}
       #   create_credentials_file: true
        #  export_environment_variables: true
         # cleanup_credentials: true
      
    
   # - name: Retrieve Latest GCP Image and Save IMAGE_ID
    #  run: |
     #   GCP_IMAGE_ID=$(gcloud compute images list \
      #    --project=${{ secrets.GCP_PROJECT_ID }} \
       #   --sort-by="~creationTimestamp" \
        #  --limit=1 \
         # --format="value(NAME)")

       # if [[ -n "$GCP_IMAGE_ID" ]]; then
        #  echo "Found latest GCP Image: $GCP_IMAGE_ID"
        #  echo "GCP_IMAGE_ID=$GCP_IMAGE_ID" >> $GITHUB_ENV
        #else
        #  echo "No GCP Image found!"
        #  exit 1
        #fi

     
    #- name: Save GCP Image ID
     # run: echo "$GCP_IMAGE_ID" > gcp_image_id.txt


  #  - name: Upload GCP AMI ID Artifact
   #   uses: actions/upload-artifact@v4
    #  with:
     #     name: gcp_image_id
      #    path: gcp_image_id.txt
       #   if-no-files-found: error
        #  compression-level: 6
         # overwrite: true


    - name: Configure AWS CLI for Dev/Demo Account
      run: |
        if [ "${{ secrets.DEPLOY_ENVIRONMENT }}" = "dev" ]; then
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
        elif [ "${{ secrets.DEPLOY_ENVIRONMENT }}" = "demo" ]; then
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws configure set region ${{ secrets.AWS_REGION }}
        else
          echo "Invalid deploy environment specified: ${{ secrets.DEPLOY_ENVIRONMENT }}"
          exit 1
        fi
