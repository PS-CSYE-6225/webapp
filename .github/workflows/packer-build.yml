name: Packer Build

on:
  push:
    branches:
        - main

jobs:
  build:
    name: Packer Build Check
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: ${{secrets.DB_PASSWORD}}
          DB_NAME: ${{secrets.DB_NAME}}
          DB_USER: ${{secrets.DB_USER}}
          DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

      # Step to create .env file with secret values
    - name: Create .env file
      run: |
        touch .env
        echo "DB_PORT=${{secrets.DB_PORT}}" >> .env
        echo "DB_NAME=${{secrets.DB_NAME}}" >> .env
        echo "DB_PASSWORD=${{secrets.DB_PASSWORD}}" >> .env
        echo "DB_USER=${{secrets.DB_USER}}" >> .env
        echo "DB_HOST=${{secrets.DB_HOST}}" >> .env
        cat .env

    - name: Zip Webapp Directory
      run: zip -r webapp.zip .

    - name: Check if webapp.zip Exists
      run: |
        if [ -f ./webapp.zip ]; then
          echo "webapp.zip exists."
        else
          echo "webapp.zip does not exist."
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: "20.x"

    - name: Install Dependencies
      run: npm i

    - name: Configure Environment Variables
      run: |
        echo DB_USER=${{ secrets.DB_USER }}
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        echo DB_NAME=${{ secrets.DB_NAME }}
        echo DB_HOST=${{ secrets.DB_HOST }}
        echo DB_PORT=${{ secrets.DB_PORT }}

    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h "127.0.0.1" --silent; do
          echo "Waiting for MySQL to be ready..."
          sleep 5
        done

    - name: Run Test
      run: npm test 
      env:
        DB_PORT: ${{secrets.DB_PORT}}
        DB_NAME: ${{secrets.DB_NAME}}
        DB_PASSWORD: ${{secrets.DB_PASSWORD}}
        DB_USER: ${{secrets.DB_USER}}
        DB_HOST: ${{secrets.DB_HOST}}
        #ENVIORNMENT: ${{secrets.ENVIORNMENT}}

    - name: Install AWS CLI
      run: sudo apt-get install -y awscli

    - name: Install Packer
      run: sudo apt-get install -y packer

    - name: Install plugins
      run: packer init .

    - name: Validate Packer Template
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        packer validate \
        -var "VPC_ID=${{secrets.VPC_ID}}" \
        -var "SUBNET_ID=${{secrets.SUBNET_ID}}" \
        -var "DB_USER=${{secrets.DB_USER}}" \
        -var "DB_PASSWORD=${{secrets.DB_PASSWORD}}" \
        -var "DB_NAME=${{secrets.DB_NAME}}" \
        -var "DEMO_USER=${{secrets.DEMO_USER}}" \
        -var "DEV_USER=${{secrets.DEV_USER}}" \
        app/packer/.

    - name: Build Packer Image
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        packer build \
        -var "VPC_ID=${{secrets.VPC_ID}}" \
        -var "SUBNET_ID=${{secrets.SUBNET_ID}}" \
        -var "DB_USER=${{secrets.DB_USER}}" \
        -var "DB_PASSWORD=${{secrets.DB_PASSWORD}}" \
        -var "DB_NAME=${{secrets.DB_NAME}}" \
        -var "DEMO_USER=${{secrets.DEMO_USER}}" \
        -var "DEV_USER=${{secrets.DEV_USER}}" \
        app/packer/.
      
    #- name: Configure AWS CLI for Dev/Demo Account
     # run: |
      #  if [ "${{ secrets.DEPLOY_ENVIRONMENT }}" = "dev" ]; then
       #   aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        #  aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         #aws configure set region ${{ secrets.AWS_REGION }}
        #elif [ "${{ secrets.DEPLOY_ENVIRONMENT }}" = "demo" ]; then
         # aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          #aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          #aws configure set region ${{ secrets.AWS_REGION }}
        #else
         # echo "Invalid deploy environment specified: ${{ secrets.DEPLOY_ENVIRONMENT }}"
          #exit 1
        #fi

    